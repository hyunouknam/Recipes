type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import recipes.RecipesApplication;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            new Recipe(
                "Fresh Mint Tea /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),

            new Recipe(
                "Warming Ginger Tea /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            new Recipe(
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),

            new Recipe(
                "Fresh Mint Tea",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),

            new Recipe(
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),

            new Recipe(
                "Fresh Mint Tea",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };


        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";

        // recipes ids will be saved when testing POST requests and used later to test GET/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            final Gson gson = new Gson();
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),

            () -> testDeleteRecipe(recipeIds.get(0)),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0)),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7])
        };

        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/Model/Recipe.java
  visible: true
  text: |
    package recipes.Model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Recipe {
        @JsonIgnore
        int id;
        String name;
        String description;
        String[] ingredients;
        String[] directions;

        public Recipe() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String[] getIngredients() {
            return ingredients;
        }

        public void setIngredients(String[] ingredients) {
            this.ingredients = ingredients;
        }

        public String[] getDirections() {
            return directions;
        }

        public void setDirections(String[] directions) {
            this.directions = directions;
        }
    }
  learner_created: true
- name: src/recipes/Controller/ApiController.java
  visible: true
  text: |
    package recipes.Controller;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;
    import recipes.Model.Recipe;

    import java.util.HashMap;
    import java.util.Map;

    @RestController
    public class ApiController {

        Map<Integer, Recipe> recipeMap = new HashMap<>();
        int counter = 0;

        @PostMapping(path = "/api/recipe/new")
        public Map postRecipe(@RequestBody Recipe recipe){
            counter++;
            recipe.setId(counter);
            recipeMap.put(counter, recipe);
            return Map.of("id", counter);
        }

        @GetMapping(path = "/api/recipe/{id}")
        public Recipe getRecipe(@PathVariable int id){
            if(recipeMap.containsKey(id)) {
                return recipeMap.get(id);
            }

            throw new ResponseStatusException(HttpStatus.NOT_FOUND);

        }


    }
  learner_created: true
- name: src/recipes/Service/RecipeService.java
  visible: true
  text: |
    package recipes.Service;

    import org.springframework.stereotype.Service;
    import recipes.Model.Recipe;

    import java.util.HashMap;
    import java.util.Map;

    @Service
    public class RecipeService {

        Map<Integer, Recipe> recipeMap = new HashMap<>();
        int counter = 0;

        public int addRecipe(Recipe recipe) {
            counter++;
            recipe.setId(counter);
            recipeMap.put(counter, recipe);
            return counter;
        }

        public Recipe getRecipe(int id) {
            return recipeMap.get(id);
        }
    }
  learner_created: true
- name: src/recipes/RecipeRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/919/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #8

    DELETE /api/recipe/1 should respond with status code 204, responded: 405

    Response body:
    {&quot;timestamp&quot;:&quot;2021-11-05T20:54:34.128+00:00&quot;,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/api/recipe/1&quot;}

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-11-05 16:54:25.056  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication on DESKTOP-TQV2K0M with PID 4464 (started by pauln in C:\Users\pauln\Desktop\Recipes2\Recipes\task)
    2021-11-05 16:54:25.062  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-11-05 16:54:26.853  INFO 4464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-11-05 16:54:26.929  INFO 4464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 64ms. Found 1 JPA repository interfaces.
    2021-11-05 16:54:27.924  INFO 4464 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2021-11-05 16:54:27.943  INFO 4464 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-11-05 16:54:27.944  INFO 4464 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-11-05 16:54:28.166  INFO 4464 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-11-05 16:54:28.167  INFO 4464 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3022 ms
    2021-11-05 16:54:28.416  INFO 4464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-11-05 16:54:28.701  INFO 4464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-11-05 16:54:28.714  INFO 4464 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;
    2021-11-05 16:54:28.993  INFO 4464 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-05 16:54:29.073  INFO 4464 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-11-05 16:54:29.136  WARN 4464 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-11-05 16:54:29.189  INFO 4464 --- [         task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.17.Final
    2021-11-05 16:54:29.491  INFO 4464 --- [         task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2021-11-05 16:54:29.718  INFO 4464 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-11-05 16:54:30.769  INFO 4464 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-11-05 16:54:30.782  INFO 4464 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-05 16:54:30.849  INFO 4464 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-11-05 16:54:30.910  INFO 4464 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2021-11-05 16:54:30.912  INFO 4464 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-11-05 16:54:31.204  INFO 4464 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-11-05 16:54:31.215  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 6.825 seconds (JVM running for 8.152)
    2021-11-05 16:54:31.682  INFO 4464 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-11-05 16:54:31.683  INFO 4464 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-11-05 16:54:31.695  INFO 4464 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
    2021-11-05 16:54:32.832  INFO 4464 --- [     Thread-313] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-05 16:54:32.835  INFO 4464 --- [     Thread-313] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-05 16:54:32.836  INFO 4464 --- [     Thread-313] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2021-11-05 16:54:32.862  INFO 4464 --- [     Thread-313] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-11-05 16:54:32.911  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication on DESKTOP-TQV2K0M with PID 4464 (started by pauln in C:\Users\pauln\Desktop\Recipes2\Recipes\task)
    2021-11-05 16:54:32.912  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-11-05 16:54:33.402  INFO 4464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-11-05 16:54:33.414  INFO 4464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 1 JPA repository interfaces.
    2021-11-05 16:54:33.528  INFO 4464 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2021-11-05 16:54:33.529  INFO 4464 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-11-05 16:54:33.529  INFO 4464 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-11-05 16:54:33.569  INFO 4464 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-11-05 16:54:33.569  INFO 4464 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 654 ms
    2021-11-05 16:54:33.635  INFO 4464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2021-11-05 16:54:33.647  INFO 4464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2021-11-05 16:54:33.647  INFO 4464 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;
    2021-11-05 16:54:33.705  INFO 4464 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-05 16:54:33.712  INFO 4464 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-11-05 16:54:33.725  INFO 4464 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-11-05 16:54:33.747  WARN 4464 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-11-05 16:54:33.793  INFO 4464 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-11-05 16:54:33.794  INFO 4464 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-05 16:54:34.006  INFO 4464 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-11-05 16:54:34.025  INFO 4464 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2021-11-05 16:54:34.025  INFO 4464 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-11-05 16:54:34.067  INFO 4464 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-11-05 16:54:34.073  INFO 4464 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 1.202 seconds (JVM running for 11.009)
    2021-11-05 16:54:34.081  INFO 4464 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-11-05 16:54:34.081  INFO 4464 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-11-05 16:54:34.084  INFO 4464 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
    2021-11-05 16:54:34.118  WARN 4464 --- [nio-8881-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method &#39;DELETE&#39; not supported]
  time: Fri, 05 Nov 2021 20:54:34 UTC
record: 3
